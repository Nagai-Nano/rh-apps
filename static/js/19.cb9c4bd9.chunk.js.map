{"version":3,"sources":["pages/TextToSpeech/Styles.js","pages/TextToSpeech/index.js"],"names":["PageContainer","styled","div","CardForm","CardTitle","h2","CardBody","InputGroup","Select","AntdSelect","Button","AntdButton","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","TextToSpeech","useState","ready","setReady","voices","setVoices","selectedVoice","setSelectedVoice","rate","setRate","pitch","setPitch","text","setText","useEffect","getVoices","length","handleVoiceChange","onvoiceschanged","htmlFor","id","size","style","width","value","voiceURI","onChange","find","voice","map","name","lang","Option","key","min","max","step","TextArea","rows","target","icon","SoundOutlined","type","onClick","speak"],"mappings":"oyCAGO,IAAMA,EAAgBC,IAAOC,IAAV,KAQbC,EAAWF,IAAOC,IAAV,KAMRE,EAAYH,IAAOI,GAAV,KAYTC,EAAWL,IAAOC,IAAV,KAIRK,EAAaN,IAAOC,IAAV,KAWVM,EAASP,YAAOQ,IAAPR,CAAH,KAINS,EAAST,YAAOU,IAAPV,CAAH,KClCbW,EAAQC,gBACRC,EAAY,IAAIC,yBA4GPC,UA1Gf,WAAyB,IAAD,EACIC,oBAAS,GADb,mBACfC,EADe,KACRC,EADQ,OAEMF,mBAAS,IAFf,mBAEfG,EAFe,KAEPC,EAFO,OAGoBJ,mBAAS,IAH7B,mBAGfK,EAHe,KAGAC,EAHA,OAIEN,mBAAS,GAJX,mBAIfO,EAJe,KAITC,EAJS,OAKIR,mBAAS,GALb,mBAKfS,EALe,KAKRC,EALQ,OAMEV,mBAAS,wBANX,mBAMfW,EANe,KAMTC,EANS,KAQtBC,qBAAU,WACJlB,EAAMmB,YAAYC,OACpBC,IAEArB,EAAMsB,gBAAkBD,IAEzB,IAEH,IAAMA,EAAoB,WACxB,IAAMb,EAASR,EAAMmB,YACrBV,EAAUD,GACVG,EAAiBH,EAAO,IACxBD,GAAS,IA4BX,OAAKD,EAKH,kBAAClB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,uBACA,kBAACE,EAAD,KACE,kBAACC,EAAD,KACE,2BAAO4B,QAAQ,QAAf,YACA,kBAAC3B,EAAD,CACE4B,GAAG,OACHC,KAAK,QACLC,MAAO,CAAEC,MAAO,QAChBC,MAAOlB,EAAcmB,SACrBC,SAzCoB,SAACF,GAC/BjB,EAAiBH,EAAOuB,MAAK,SAACC,GAAD,OAAWA,EAAMH,WAAaD,QA0ChDpB,EAAOyB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMN,EAAf,EAAeA,SAAf,OACV,kBAACjC,EAAOwC,OAAR,CAAeC,IAAKR,EAAUD,MAAOC,GAClCK,EADH,KACWC,EADX,UAMN,kBAACxC,EAAD,KACE,2BAAO4B,QAAQ,QAAf,QACA,kBAAC,IAAD,CACEe,IAAK,GACLC,IAAK,GACLC,KAAM,GACNZ,MAAOhB,EACPkB,SArDa,SAACF,GACxBf,EAAQe,OAuDF,kBAACjC,EAAD,KACE,2BAAO4B,QAAQ,SAAf,SACA,kBAAC,IAAD,CACEe,IAAK,EACLC,IAAK,EACLC,KAAM,GACNZ,MAAOd,EACPgB,SA3Dc,SAACF,GACzBb,EAASa,OA6DH,kBAAC,IAAMa,SAAP,CAAgBC,KAAM,GAAId,MAAOZ,EAAMc,SA1DtB,SAAC,GAA2B,IAAfF,EAAc,EAAxBe,OAAUf,MACpCX,EAAQW,MA0DF,kBAAC9B,EAAD,CACE8C,KAAM,kBAACC,EAAA,EAAD,MACNC,KAAK,UACLrB,KAAK,QACLsB,QA3DU,WACb/B,IACLd,EAAU8B,MAAQtB,EAClBR,EAAUc,KAAOA,EACjBd,EAAUU,KAAOA,EACjBV,EAAUY,MAAQA,EAClBd,EAAMgD,MAAM9C,UAIL,kBAAC,IAAD","file":"static/js/19.cb9c4bd9.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Select as AntdSelect, Button as AntdButton } from 'antd';\n\nexport const PageContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const CardForm = styled.div`\n  width: 40rem;\n  border: 1px solid #d9d9d9;\n  box-shadow: 0 0 8px #f0f1f2;\n`;\n\nexport const CardTitle = styled.h2`\n  text-align: center;\n  font-size: 2.5rem;\n  text-transform: uppercase;\n  font-weight: bold;\n  letter-spacing: 1px;\n  background: #13c2c2;\n  padding: 1rem;\n  color: #fff;\n  margin: 0;\n`;\n\nexport const CardBody = styled.div`\n  padding: 2rem;\n`;\n\nexport const InputGroup = styled.div`\n  margin-bottom: 1rem;\n\n  label {\n    display: inline-block;\n    font-size: 14px;\n    margin-bottom: 5px;\n    color: #727272;\n  }\n`;\n\nexport const Select = styled(AntdSelect)`\n  width: 100%;\n`;\n\nexport const Button = styled(AntdButton)`\n  margin-top: 1rem;\n  width: 100% !important;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Spin, Input, Slider } from 'antd';\nimport { SoundOutlined } from '@ant-design/icons';\n\nimport {\n  PageContainer,\n  CardForm,\n  CardTitle,\n  CardBody,\n  InputGroup,\n  Select,\n  Button\n} from './Styles';\n\nconst synth = speechSynthesis;\nconst utterance = new SpeechSynthesisUtterance();\n\nfunction TextToSpeech() {\n  const [ready, setReady] = useState(false);\n  const [voices, setVoices] = useState([]);\n  const [selectedVoice, setSelectedVoice] = useState({});\n  const [rate, setRate] = useState(1);\n  const [pitch, setPitch] = useState(1);\n  const [text, setText] = useState('I Love You 3000! UwU');\n\n  useEffect(() => {\n    if (synth.getVoices().length) {\n      handleVoiceChange();\n    } else {\n      synth.onvoiceschanged = handleVoiceChange;\n    }\n  }, []);\n\n  const handleVoiceChange = () => {\n    const voices = synth.getVoices();\n    setVoices(voices);\n    setSelectedVoice(voices[0]);\n    setReady(true);\n  };\n\n  const handleSelectVoiceChange = (value) => {\n    setSelectedVoice(voices.find((voice) => voice.voiceURI === value));\n  };\n\n  const handleRateChange = (value) => {\n    setRate(value);\n  };\n\n  const handlePitchChange = (value) => {\n    setPitch(value);\n  };\n\n  const handleTextChange = ({ target: { value } }) => {\n    setText(value);\n  };\n\n  const handleSpeak = () => {\n    if (!text) return;\n    utterance.voice = selectedVoice;\n    utterance.text = text;\n    utterance.rate = rate;\n    utterance.pitch = pitch;\n    synth.speak(utterance);\n  };\n\n  if (!ready) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer>\n      <CardForm>\n        <CardTitle>Text To Speech</CardTitle>\n        <CardBody>\n          <InputGroup>\n            <label htmlFor=\"lang\">Language</label>\n            <Select\n              id=\"lang\"\n              size=\"large\"\n              style={{ width: '100%' }}\n              value={selectedVoice.voiceURI}\n              onChange={handleSelectVoiceChange}\n            >\n              {voices.map(({ name, lang, voiceURI }) => (\n                <Select.Option key={voiceURI} value={voiceURI}>\n                  {name} [{lang}]\n                </Select.Option>\n              ))}\n            </Select>\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"rate\">Rate</label>\n            <Slider\n              min={0.1}\n              max={10}\n              step={0.1}\n              value={rate}\n              onChange={handleRateChange}\n            />\n          </InputGroup>\n          <InputGroup>\n            <label htmlFor=\"pitch\">Pitch</label>\n            <Slider\n              min={0}\n              max={2}\n              step={0.1}\n              value={pitch}\n              onChange={handlePitchChange}\n            />\n          </InputGroup>\n          <Input.TextArea rows={12} value={text} onChange={handleTextChange} />\n          <Button\n            icon={<SoundOutlined />}\n            type=\"primary\"\n            size=\"large\"\n            onClick={handleSpeak}\n          />\n        </CardBody>\n      </CardForm>\n    </PageContainer>\n  );\n}\n\nexport default TextToSpeech;\n"],"sourceRoot":""}