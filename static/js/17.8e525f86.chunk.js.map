{"version":3,"sources":["pages/InfiniteKittens/Styles.js","pages/InfiniteKittens/Image.js","pages/InfiniteKittens/index.js"],"names":["GalleryContainer","styled","div","ImageContainer","ImageLoading","Spin","ImageError","ErrorMessage","ImageLoader","src","alt","onImageClick","useState","loading","setLoading","error","setError","imageRef","useRef","useEffect","img","Image","onload","onImageLoad","onerror","onImageError","current","className","onClick","undefined","event","FrownOutlined","ref","accessKey","process","InfiniteKittens","data","setData","page","setPage","totalPage","setTotalPage","isCurrent","fetchImages","a","fetch","response","json","total_pages","prev","results","dataLength","length","next","hasMore","loader","style","width","margin","map","id","alt_description","urls","key","regular"],"mappings":"gsDAGO,IAAMA,EAAmBC,IAAOC,IAAV,KAOhBC,EAAiBF,IAAOC,IAAV,KAyBdE,EAAeH,YAAOI,IAAPJ,CAAH,KAYZK,EAAaL,IAAOC,IAAV,KAwBVK,EAAeN,IAAOC,IAAV,KCnBVM,MA/Cf,YAAkD,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,IAAKC,EAAgB,EAAhBA,aAAgB,EACjBC,oBAAS,GADQ,mBACxCC,EADwC,KAC/BC,EAD+B,OAErBF,oBAAS,GAFY,mBAExCG,EAFwC,KAEjCC,EAFiC,KAGzCC,EAAWC,iBAAO,MAExBC,qBAAU,WACR,IAAMC,EAAM,IAAIC,MAChBD,EAAIX,IAAMA,EACVW,EAAIE,OAASC,EACbH,EAAII,QAAUC,IAEb,CAAChB,IAEJ,IAAMc,EAAc,WACdN,GAAYA,EAASS,UACvBT,EAASS,QAAQjB,IAAMA,EACvBO,GAAS,GACTF,GAAW,KAITW,EAAe,WACnBT,GAAS,GACTF,GAAW,IAOb,OACE,kBAACX,EAAD,CACEwB,WAAYd,IAAYE,GAAS,sBACjCa,QAAUf,GAAYE,IAASJ,OAA6BkB,EAP5C,SAACC,GACnBnB,EAAamB,KAQVjB,GAAW,kBAACT,EAAD,MACXW,GACC,kBAACT,EAAD,KACE,kBAACyB,EAAA,EAAD,MACA,yDAGJ,yBAAKC,IAAKf,EAAUP,IAAKA,MCvCzBuB,EAAYC,8CAwEHC,UAtEf,WAA4B,IAAD,EACCvB,oBAAS,GADV,mBAClBG,EADkB,KACXC,EADW,OAEDJ,mBAAS,IAFR,mBAElBwB,EAFkB,KAEZC,EAFY,OAGDzB,mBAAS,GAHR,mBAGlB0B,EAHkB,KAGZC,EAHY,OAIS3B,mBAAS,GAJlB,mBAIlB4B,EAJkB,KAIPC,EAJO,KAMzBtB,qBAAU,WACR,IAAIuB,GAAY,EAGhB,OAFAC,EAAYD,GAEL,WACLA,GAAY,KAGb,CAACJ,IAEJ,IAAMK,EAAW,uCAAG,WAAOD,GAAP,iBAAAE,EAAA,+EAEOC,MAAM,+CAAD,OACqBP,EADrB,mCACoDL,EADpD,iBAFZ,cAEVa,EAFU,gBAKGA,EAASC,OALZ,OAKVX,EALU,OAMZM,IACFD,EAAaL,EAAKY,aAClBX,GAAQ,SAACY,GAAD,4BAAcA,GAAd,YAAuBb,EAAKc,cARtB,kDAWZR,GAAW1B,GAAS,GAXR,0DAAH,sDA4BjB,OACE,kBAAC,IAAD,CACEmC,WAAYf,EAAKgB,OACjBC,KAAOtC,OAA4Cc,EAApC,kBAAMU,GAAQ,SAACU,GAAD,OAAUA,EAAO,MAC9CK,QAAShB,EAAOE,EAChBe,OACExC,OAAQc,EACN,kBAAC,IAAD,CAAM2B,MAAO,CAAEC,MAAO,OAAQC,OAAQ,eAI1C,kBAAC1D,EAAD,KACGoC,EAAKuB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,gBAAiBC,EAAxB,EAAwBA,KAAxB,OACR,kBAAC,EAAD,CAAOC,IAAKH,EAAInD,IAAKqD,EAAKE,QAAStD,IAAKmD,QAG3C9C,GACC,kBAACR,EAAD,KACE,kBAACwB,EAAA,EAAD,MACA","file":"static/js/17.8e525f86.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Spin } from 'antd';\n\nexport const GalleryContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-auto-rows: 270px;\n  grid-gap: 1rem;\n`;\n\nexport const ImageContainer = styled.div`\n  padding: 7px;\n  border: 1px solid rgba(0, 0, 0, 0.07);\n  border-radius: 2px;\n  transition: all 0.2s linear;\n  position: relative;\n\n  &.clickable {\n    cursor: pointer;\n  }\n\n  &.hoverable {\n    &:hover {\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.07);\n    }\n  }\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border-radius: 2px;\n  }\n`;\n\nexport const ImageLoading = styled(Spin)`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: #fff;\n  top: 0;\n  left: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const ImageError = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: #fff;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    color: #ff4d4f;\n    font-size: 2rem;\n  }\n\n  p {\n    margin-top: 10px;\n    margin-bottom: 0;\n    color: #ff4d4f;\n  }\n`;\n\nexport const ErrorMessage = styled.div`\n  margin-top: 3rem;\n  text-align: center;\n  font-size: 1.5rem;\n  color: #ff4d4f;\n\n  svg {\n    font-size: 2rem;\n  }\n\n  p {\n    font-size: 1rem;\n  }\n`;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FrownOutlined } from '@ant-design/icons';\n\nimport { ImageContainer, ImageLoading, ImageError } from './Styles';\n\nfunction ImageLoader({ src, alt, onImageClick }) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const imageRef = useRef(null);\n\n  useEffect(() => {\n    const img = new Image();\n    img.src = src;\n    img.onload = onImageLoad;\n    img.onerror = onImageError;\n    // eslint-disable-next-line\n  }, [src]);\n\n  const onImageLoad = () => {\n    if (imageRef && imageRef.current) {\n      imageRef.current.src = src;\n      setError(false);\n      setLoading(false);\n    }\n  };\n\n  const onImageError = () => {\n    setError(true);\n    setLoading(false);\n  };\n\n  const handleClick = (event) => {\n    onImageClick(event);\n  };\n\n  return (\n    <ImageContainer\n      className={!loading && !error && 'hoverable clickable'}\n      onClick={!loading && !error && onImageClick ? handleClick : undefined}\n    >\n      {loading && <ImageLoading />}\n      {error && (\n        <ImageError>\n          <FrownOutlined />\n          <p>Failed to load this image</p>\n        </ImageError>\n      )}\n      <img ref={imageRef} alt={alt} />\n    </ImageContainer>\n  );\n}\n\nexport default ImageLoader;\n","import React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Spin } from 'antd';\nimport { FrownOutlined } from '@ant-design/icons';\n\nimport { GalleryContainer, ErrorMessage } from './Styles';\nimport Image from './Image';\n\nconst accessKey = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n\nfunction InfiniteKittens() {\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n\n  useEffect(() => {\n    let isCurrent = true;\n    fetchImages(isCurrent);\n\n    return () => {\n      isCurrent = false;\n    };\n    // eslint-disable-next-line\n  }, [page]);\n\n  const fetchImages = async (isCurrent) => {\n    try {\n      const response = await fetch(\n        `https://api.unsplash.com/search/photos?page=${page}&query=kitten&client_id=${accessKey}&per_page=15`\n      );\n      const data = await response.json();\n      if (isCurrent) {\n        setTotalPage(data.total_pages);\n        setData((prev) => [...prev, ...data.results]);\n      }\n    } catch {\n      if (isCurrent) setError(true);\n    }\n  };\n\n  if (!accessKey) {\n    return (\n      <a\n        href=\"https://unsplash.com/oauth/applications\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        style={{ fontSize: '1.2rem' }}\n      >\n        You need to provide Unsplash access key to run this app\n      </a>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      dataLength={data.length}\n      next={!error ? () => setPage((prev) => prev + 1) : undefined}\n      hasMore={page < totalPage}\n      loader={\n        error ? undefined : (\n          <Spin style={{ width: '100%', margin: '2.5rem 0' }} />\n        )\n      }\n    >\n      <GalleryContainer>\n        {data.map(({ id, alt_description, urls }) => (\n          <Image key={id} src={urls.regular} alt={alt_description} />\n        ))}\n      </GalleryContainer>\n      {error && (\n        <ErrorMessage>\n          <FrownOutlined />\n          <p>Error! Something went wrong</p>\n        </ErrorMessage>\n      )}\n    </InfiniteScroll>\n  );\n}\n\nexport default InfiniteKittens;\n"],"sourceRoot":""}