{"version":3,"sources":["pages/GenPass/Styles.js","pages/GenPass/index.js"],"names":["PageContainer","styled","div","PageTitle","h1","PageContent","InputGroup","CheckboxGroup","UPPERCASE","toUpperCase","GenPass","useState","password","setPassword","length","setLength","lowercase","uppercase","numbers","symbols","options","setOptions","handleOptionChange","key","target","prev","checked","className","htmlFor","id","style","width","padding","value","onChange","isNaN","Object","keys","map","type","size","block","marginTop","onClick","charset","output","i","charLength","charAt","Math","random","fontSize"],"mappings":"8pCAEO,IAAMA,EAAgBC,IAAOC,IAAV,KAQbC,EAAYF,IAAOG,GAAV,KAQTC,EAAcJ,IAAOC,IAAV,KAaXI,EAAaL,IAAOC,IAAV,KAOVK,EAAgBN,IAAOC,IAAV,KC1BpBM,EADY,6BACUC,cAqFbC,UAjFf,WAAoB,IAAD,EACeC,mBAAS,UADxB,mBACVC,EADU,KACAC,EADA,OAEWF,mBAAS,GAFpB,mBAEVG,EAFU,KAEFC,EAFE,OAGaJ,mBAAS,CACrCK,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,SAAS,IAPM,mBAGVC,EAHU,KAGDC,EAHC,KAgBXC,EAAqB,SAACC,GAAD,OAAS,YAAiB,IAAdC,EAAa,EAAbA,OACrCH,GAAW,SAACI,GAAD,sBACNA,EADM,eAERF,EAAMC,EAAOE,eAkBlB,OACE,kBAAC1B,EAAD,KACE,kBAACG,EAAD,2BACA,kBAACE,EAAD,KACE,yBAAKsB,UAAU,OACb,kBAACrB,EAAD,KACE,2BAAOsB,QAAQ,gBAAf,UACA,kBAAC,IAAD,CACEC,GAAG,eACHC,MAAO,CAAEC,MAAO,OAAQC,QAAS,OACjCC,MAAOnB,EACPoB,SAtCe,SAACD,IACrBE,MAAMF,KAAWA,EAAQ,IAAMA,EAAQ,IAC1ClB,EAAUkB,OAuCN,kBAAC1B,EAAD,KACG6B,OAAOC,KAAKjB,GAASkB,KAAI,SAACf,GAAD,OACxB,kBAAC,IAAD,CACEA,IAAKA,EACLG,QAASN,EAAQG,GACjBW,SAAUZ,EAAmBC,IAE5BA,OAIP,kBAAC,IAAD,CACEgB,KAAK,UACLC,KAAK,QACLC,OAAK,EACLX,MAAO,CAAEY,UAAW,IACpBC,QA5Ca,WACrB,IAAIC,EA7BU,6BA8BVC,EAAS,GAETzB,EAAQH,YAAW2B,GAAWpC,GAC9BY,EAAQF,UAAS0B,GA/BT,cAgCRxB,EAAQD,UAASyB,GA/BT,2BAiCZ,IAAK,IAAIE,EAAI,EAAGC,EAAaH,EAAQ9B,OAAQgC,EAAIhC,EAAQgC,IACvDD,GAAUD,EAAQI,UAAUC,KAAKC,SAAWH,IAE9ClC,EAAYgC,KA4BN,aAUF,yBAAKlB,UAAU,OACb,uCACA,yBAAKG,MAAO,CAAEqB,SAAU,WAAavC","file":"static/js/16.9d46ae8a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const PageTitle = styled.h1`\n  font-size: 2.4rem;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  margin-bottom: 1.5rem;\n  font-weight: bold;\n`;\n\nexport const PageContent = styled.div`\n  width: 70%;\n  display: inline-flex;\n  justify-content: space-between;\n\n  .box {\n    width: 49%;\n    border: 1px solid #d9d9d9;\n    padding: 2rem;\n    border-radius: 3px;\n  }\n`;\n\nexport const InputGroup = styled.div`\n  label {\n    display: inline-block;\n    margin-bottom: 4px;\n  }\n`;\n\nexport const CheckboxGroup = styled.div`\n  margin-top: 12px;\n\n  .ant-checkbox-wrapper > span:nth-child(2) {\n    text-transform: capitalize;\n    font-size: 1rem;\n  }\n`;\n","import React, { useState } from 'react';\nimport { InputNumber, Checkbox, Button } from 'antd';\n\nimport {\n  PageContainer,\n  PageTitle,\n  PageContent,\n  InputGroup,\n  CheckboxGroup\n} from './Styles';\n\nconst LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';\nconst UPPERCASE = LOWERCASE.toUpperCase();\nconst NUMBERS = '0123456789';\nconst SYMBOLS = '!@#$%^&*()_+-=[]{}|;.,/';\n\nfunction GenPass() {\n  const [password, setPassword] = useState('q^_V6/');\n  const [length, setLength] = useState(6);\n  const [options, setOptions] = useState({\n    lowercase: true,\n    uppercase: true,\n    numbers: true,\n    symbols: true\n  });\n\n  const handleLengthChange = (value) => {\n    if (!isNaN(value) && +value > 5 && +value < 35) {\n      setLength(value);\n    }\n  };\n\n  const handleOptionChange = (key) => ({ target }) => {\n    setOptions((prev) => ({\n      ...prev,\n      [key]: target.checked\n    }));\n  };\n\n  const handleGenerate = () => {\n    let charset = LOWERCASE;\n    let output = '';\n\n    if (options.uppercase) charset += UPPERCASE;\n    if (options.numbers) charset += NUMBERS;\n    if (options.symbols) charset += SYMBOLS;\n\n    for (let i = 0, charLength = charset.length; i < length; i++) {\n      output += charset.charAt(~~(Math.random() * charLength));\n    }\n    setPassword(output);\n  };\n\n  return (\n    <PageContainer>\n      <PageTitle>Password Generator</PageTitle>\n      <PageContent>\n        <div className=\"box\">\n          <InputGroup>\n            <label htmlFor=\"input-length\">Length</label>\n            <InputNumber\n              id=\"input-length\"\n              style={{ width: '100%', padding: '5px' }}\n              value={length}\n              onChange={handleLengthChange}\n            />\n          </InputGroup>\n          <CheckboxGroup>\n            {Object.keys(options).map((key) => (\n              <Checkbox\n                key={key}\n                checked={options[key]}\n                onChange={handleOptionChange(key)}\n              >\n                {key}\n              </Checkbox>\n            ))}\n          </CheckboxGroup>\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            block\n            style={{ marginTop: 20 }}\n            onClick={handleGenerate}\n          >\n            Generate\n          </Button>\n        </div>\n        <div className=\"box\">\n          <h3>Result:</h3>\n          <div style={{ fontSize: '1.2rem' }}>{password}</div>\n        </div>\n      </PageContent>\n    </PageContainer>\n  );\n}\n\nexport default GenPass;\n"],"sourceRoot":""}